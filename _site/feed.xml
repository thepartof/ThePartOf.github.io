<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ThePartOf BLOG</title>
    <description>Content ©2015 - 2016 by Andrew Wu @ ThePartOf BLOG.
</description>
    <link>http://thepartof.github.io/</link>
    <atom:link href="http://thepartof.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Mar 2016 21:54:46 +0800</pubDate>
    <lastBuildDate>Tue, 01 Mar 2016 21:54:46 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Some Thoughts of AngularJs</title>
        <description>&lt;p&gt;I’m still quite new to the AngularJS, but with my recent experience, I’ve found something quite exciting.&lt;/p&gt;

&lt;p&gt;2-way data binding is definitely something worth talking about, it has both pros and cons. Since I’ve just switched to 
AngularJS from jQuery, one very obvious advantage is that I no longer need to do tedious dirty checking manually to 
monitor all the inputs and data. Angular does it for me with just one in-line attribute, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-model&lt;/code&gt;. And with 
ng-model, I am allowed to link multiple inout fields together to get the form data. But there are negative sides as 
well, inputs and ng-model are of one-to-one relationship, that means we can neither have a composite ng-model which 
crosses multiple inputs nor a input that binds multiple ng-models. Compared to jQuery, angularJS has made things 
much easier in terms of change-checking and event-triggering, but when it comes to single element support, I feel that 
jQuery has offered more flexibility than Angular.&lt;/p&gt;

&lt;p&gt;One of other nice things to have is &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt;, together with directive, it helps a lot in modelization. Besides, $scope 
allows a very convenient access to certain element. Moreover, most of the angular expression uses in-line &lt;code class=&quot;highlighter-rouge&quot;&gt;ng&lt;/code&gt; attribute 
to achieve dynamic, this kind of keyword defining saves a lot of efforts in coding line by line to achieve same effects 
than jQuery.&lt;/p&gt;

&lt;p&gt;Some other things like &lt;code class=&quot;highlighter-rouge&quot;&gt;$routeProvider&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;$stateProvider&lt;/code&gt; are also very useful for different circumstances. However, I’m 
still exploring this framework. Hopefully I will find out more soon.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jan 2016 19:15:58 +0800</pubDate>
        <link>http://thepartof.github.io/writing/some-thoughts-of-angularjs</link>
        <guid isPermaLink="true">http://thepartof.github.io/writing/some-thoughts-of-angularjs</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>欲速则不达</title>
        <description>&lt;p&gt;有些反思真的很奇妙。比如现在毕业工作了,才发现上大学的时候自己其实深度中二，然而当时并没有这么觉得自己有什么不妥。&lt;/p&gt;

&lt;p&gt;我的中二大概是从大二大三才开始的，来的时间点比别人晚了好多，在大家都清醒认识现实的时候，我还在想些莫名其妙的东西。比如在周围的同学把GPA
看作头等大事的时候，我却想的是除了学习还有那么多好玩的事我怎么能让学习占领我当时的人生。 心态是很豁达，带来的后果也很直白，GPA确实没人家的好看。
然后每当出成绩的时候，我就会进一步催眠自己，why do I give a shit..但现在想想，我那些年的吃喝玩乐好像真的没带来什么特别好的影响。&lt;/p&gt;

&lt;p&gt;其实这只是一个例子，拿大家学生时代的每个人或多或少都在乎的成绩说事。我觉得更深层次导致我那么中二的原因其实是，想着自己要达到什么反而瞧不
起当下的那些小事。我觉得这和立flag有点像。原理都是你只是想着自己要怎么样，但是在你还没怎么样的时候，这种“我要xxx”的想法反而会给你一种心理暗
示，好像到了某个时间点你会自动怎么样了一样，有了这种心理安慰之后行为上就会懈怠，会有一种“别看老子现在什么都不做，但是以后肯定牛逼”的心态。&lt;/p&gt;

&lt;p&gt;对于出现这种心态的原因，我也是不甚明了。我觉得我们人类有一个自然的本性就是，我们比较偏向于能立即奏效的东西，恨不得在开始行动的一瞬间就
已经有回报了。这种急性子或者说没耐心已经是深入大部分人的骨髓了，而且对我们的影响仅次于饿了要吃东西这类的自然本能。这是一种意识形态，很难意识
到，因为我们没有耐心，所以经常会做一件事，一段时间之后发现没什么大的改善，就会失去耐心转而去做别的事情。所以在想法离现实的距离有点太远了的时
候，就会不屑于一步一步的走过去，而是恨不得大跨步的达到目标。然而现实摆在那里，能力水平不允许大跨步的跑，又不想一步一步的走，大部分人就会看起
来像是待在原地一样，但其实我觉得是在等一种机遇，让人大跨步的机遇，只是可能性微乎其微。&lt;/p&gt;

&lt;p&gt;好在现在反应过来了，作为一个20出头的人，反正nothing to lose，做什么都不丢脸，一步一步也可以走得心安理得无需被大跨步的人嘲笑。而且风水
轮流转，谁知道你走着走着是不是就会跑起来。就算不是，起码走得够久也是可以走到很远。&lt;/p&gt;

</description>
        <pubDate>Sun, 17 Jan 2016 19:15:58 +0800</pubDate>
        <link>http://thepartof.github.io/writing/%E6%AC%B2%E9%80%9F%E5%88%99%E4%B8%8D%E8%BE%BE</link>
        <guid isPermaLink="true">http://thepartof.github.io/writing/%E6%AC%B2%E9%80%9F%E5%88%99%E4%B8%8D%E8%BE%BE</guid>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Filco Majestouch 2 Blue Switch</title>
        <description>&lt;p&gt;This is an amazing keyboard for me!&lt;/p&gt;

&lt;p&gt;I promise you will start to love typing simply because you just can’t get enough of the feel when you touch the keys.&lt;/p&gt;

&lt;p&gt;I’m not sure if you accept the little noises it makes when you type, but for people who loves the blue switch like me, will definitely enjoy this “click” sound when typing!&lt;/p&gt;

&lt;p&gt;Even though you don’t like the sound, that “mechanical” feeling still makes typing a very cool thing.&lt;/p&gt;

&lt;p&gt;Anyways, just buy it or at least give a try! You won’t regret!&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Nov 2015 14:23:58 +0800</pubDate>
        <link>http://thepartof.github.io/writing/filco-majestouch-2-mechanical-keyboard</link>
        <guid isPermaLink="true">http://thepartof.github.io/writing/filco-majestouch-2-mechanical-keyboard</guid>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Ajax Call Json API with Async False</title>
        <description>&lt;p&gt;I only started to learn development, like seriously, when I started my first job as a developer. And honestly, before that 
I never thought one day I would be typing these out:)&lt;/p&gt;

&lt;p&gt;As a newbie, async-ajax call is the first thing I learned completely on my own when developing a module for my company. 
It was a simple module actually, I just needed to call an ajax to get the data from SQL and interpret into JSON format and then 
proceed the action with that JSON data. But all my ajax experience till then was limited to simply loading a returned html 
element, and this is what makes the learning of this async-ajax call JSON API very unforgettable.&lt;/p&gt;

&lt;p&gt;Back to the topic, to get it done at that time, I searched online quite a bit about JSON, about how to interpret the SQL data 
into JSON format. Luckily, I found a way to create JSON object and insert the SQL data to the corresponding JSON properties. 
But then, there was another issue, which was that I need to load the data first before I use it somewhere else. And we all 
know by default, the ajax call is async, which means before it finishes,  the subsequent javascript will be implemented. 
However, without that returned JSON data, the next action I needed to implement was totally a fail.&lt;/p&gt;

&lt;p&gt;And I researched, researched and researched, until I found a simple way to solve the issue which was adding &lt;code class=&quot;highlighter-rouge&quot;&gt;Async: false&lt;/code&gt; 
in that jQuery ajax call. It saved me indeed, it stopped all other javascript being implemented at the same time, meaning 
that everything else will wait until that ajax call return the json data. It helped, and I managed to finish my work.&lt;/p&gt;

&lt;p&gt;I know it was probably a easy one for most of you, but somehow it inspired a newbie to keep digging and keep learning. 
And maybe this is the only way how a newbie turns pro.&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Oct 2015 14:24:58 +0800</pubDate>
        <link>http://thepartof.github.io/writing/ajax-call-async-json-api</link>
        <guid isPermaLink="true">http://thepartof.github.io/writing/ajax-call-async-json-api</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Jekyll Tutorial For OS X EI.Capitan</title>
        <description>&lt;p&gt;Before installation, you need to make sure your &lt;code class=&quot;highlighter-rouge&quot;&gt;usr/local/bin&lt;/code&gt; is in your $PATH, if not, execute the following command in your terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And to avoid any sort of this access issue, when you install &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, you might encounter this problem when you tried to install jekyll:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Building&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;installing&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;jekyll:
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Failed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;native&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To solve this issue, you need the command line tools, you can dwonload the github desktop, and in the preference you will 
see a button which installs the command line tools.&lt;/p&gt;

&lt;p&gt;Now, congrats! You are done with the installation. And next, follow the documents on the jekyll website to create your own blog!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyBlog&lt;/span&gt;                   &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Myblog&lt;/span&gt;                      &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;folder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;                     &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;           &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enables&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;browser&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And for further information, like you want to figure out the file structure and explore what can be done, please check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 02 Oct 2015 14:24:58 +0800</pubDate>
        <link>http://thepartof.github.io/writing/jekyll-tutorial-for-osx-ei.capitan</link>
        <guid isPermaLink="true">http://thepartof.github.io/writing/jekyll-tutorial-for-osx-ei.capitan</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
